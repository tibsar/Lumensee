
var stars = JSON.parse("<%= @stars.to_json %>".replace(/&quot;/g, '"'));
console.log("<%= @average_x %>")
console.log("<%= @average_x %>" - 500)
$(function () {

    Highcharts.setOptions({
        colors: ['#FFFFFF', '#777777', '#666666', '#EEEEEE', '#444444', '#555555', '#FFFFCC', '#FFFFF0', '#FFFFDB']
    });
    //Give the points a 3D feel by adding a radial gradient
    Highcharts.getOptions().colors = $.map(Highcharts.getOptions().colors, function (color) {
        return {
            radialGradient: {
                cx: 0.4,
                cy: 0.3,
                r: 0.5
            },
            stops: [
            [0, color],
            [1, Highcharts.Color(color).brighten(-0.2).get('bw')]
            ]
        };
    });



    // Set up the chart
    var chart = new Highcharts.Chart({
        chart: {
            renderTo: 'container',
            margin: 0,
            backgroundColor: '#000000',
            type: 'scatter',
            options3d: {
                enabled: true,
                alpha: 10,
                beta: 30,
                depth: 250,
                viewDistance: 1,

                frame: {
                    bottom: { size: 0, color: 'rgba(0,0,0,0)' },
                    back: { size: 0, color: 'rgba(0,0,0,0)' },
                    side: { size: 0, color: 'rgba(0,0,0,0)' }
                }
            }
        },
        title: {
            text: 'Stars you can see tonight'
        },
        subtitle: {
            text: 'Click and drag the plot area to rotate in space'
        },
        plotOptions: {
            scatter: {
                width: 1,
                height: 1,
                depth: 1
            }
        },
        yAxis: {
            labels: {
                enabled: false
            },

            min: "<%= @y_array.min.to_i + 500 %>",
            max: "<%= @y_array.max.to_i %>",
            title: null, 
            gridLineWidth:0
        },
        xAxis: {
            labels: {
                enabled: false
            },
            min: "<%= @x_array.min.to_i + 200%>",
            max: "<%= @x_array.max.to_i %>" - 1000 ,
            gridLineWidth: 0
        },
        zAxis: {
            labels: {
                enabled: false
            },
            min: "<%= @z_array.min.to_i  - 200 %>",
            max: "<%= @z_array.max.to_i %>" + 500,
            showFirstLabel: false, 
            gridLineWidth: 0
        },
        legend: {
            enabled: false
        },
        plotOptions: {
            series:{
                color: "#FFFFFF"
            }
        },
        series: [{
            colorByPoint: true,
            data: stars,
            tooltip: {
                headerFormat: '',
                pointFormat: '{point.name}<br/>x: {point.x}<br/>y: {point.y}<br/>z: {point.z}'
            }
        }]
    });



    // Add mouse events for rotation
    $(chart.container).bind('mousedown.hc touchstart.hc', function (e) {
        e = chart.pointer.normalize(e);

        var posX = e.pageX,
        posY = e.pageY,
        alpha = chart.options.chart.options3d.alpha,
        beta = chart.options.chart.options3d.beta,
        newAlpha,
        newBeta,
                sensitivity = 5; // lower is more sensitive

                $(document).bind({
                    'mousemove.hc touchdrag.hc': function (e) {
                // Run beta
                newBeta = beta + (posX - e.pageX) / sensitivity;
                chart.options.chart.options3d.beta = newBeta;

                // Run alpha
                newAlpha = alpha + (e.pageY - posY) / sensitivity;
                chart.options.chart.options3d.alpha = newAlpha;

                chart.redraw(false);
            },
            'mouseup touchend': function () {
                $(document).unbind('.hc');
            }
        });
            });

    $('#result').append('<%= j render partial: 'pollution', locals: {pollution: @pollution} %>')


});
